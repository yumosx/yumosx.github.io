<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>yumosx's 博客</title>
<link>https://yumosx.github.io</link>
<description>我的博客</description>
<atom:link href="https://yumosx.github.io/feed.xml" rel="self" type="application/rss+xml"/>
<item>
<title>如何给 commit sign 一下</title>
<link>https://yumosx.github.io/posts/sign.html</link>
<description>最近在参加开源项目的时候，其中 Approver 要求我去给我的 commit sign 一下，也就是给对应的 commit 加上一个签名，这种签名有两种方式 Signed-off-by（您提供的这种)：是一文本记录，用于表明责任和许可同意。它很容易被任何人复制和添加。 - GPG 签名（git c...</description>
<pubDate>Thu, 16 Nov 2023 00:00:00 UTC</pubDate>
<guid>https://yumosx.github.io/posts/sign.html</guid>
</item>
<item>
<title>Go 接口的显式实现</title>
<link>https://yumosx.github.io/posts/impl.html</link>
<description>在 Go 语言中，与 Java 或 Python 等语言不同，结构体（struct）无需显式声明对某个接口的实现。 例如，在 Java 中我们常会写 class Student implements Person 来明确指定接口实现，这种方式具有一定的优势。 如果采用隐式实现机制，当接口中的方法发生...</description>
<pubDate>Wed, 15 Nov 2023 00:00:00 UTC</pubDate>
<guid>https://yumosx.github.io/posts/impl.html</guid>
</item>
<item>
<title>Python 依赖问题</title>
<link>https://yumosx.github.io/posts/pym.html</link>
<description>在 Python 中，没有像 Go 语言中那样的内置模块依赖管理工具（如 Go Modules）。我们通常使用 uv 或 poetry 来管理项目依赖，这两个工具都基于 Python 的虚拟环境（venv）机制。所谓的 venv，实际上是在项目目录中创建一系列文件夹，用于隔离不同项目的依赖。 当你为...</description>
<pubDate>Wed, 15 Nov 2023 00:00:00 UTC</pubDate>
<guid>https://yumosx.github.io/posts/pym.html</guid>
</item>
</channel>
</rss>